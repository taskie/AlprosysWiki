# 公式ページ

* [CoffeeScript](http://coffeescript.org/)
* [jashkenas/coffeescript (GitHub)](https://github.com/jashkenas/coffeescript)

# 概要

JavaScript トラップ回避用糖衣言語。

# インストール

```
$ npm install -g coffee-script
```

`coffee` は別のモジュールなので注意。`coffeescript` ではないことにも注意。

# 使い方

```
$ coffee -c hoge.coffee
```

`-m` (`--map`) オプションを付けると SourceMap を生成する。

`-w` (`--watch`) オプションを付けるとファイルを監視し、更新があると自動でコンパイルを行う。

# 利点

`TypeScript` および `ECMAScript 6` にない利点のみを挙げる。

## `this` / `this.` を `@` と書ける

塵も積もれば山。

## 括弧を省略できる

どうでもいい機能に見えるが、特に関数のアロー記法と組み合わさる際に力を発揮する。
コード例は [JavaScript Promiseの本](http://azu.github.io/promises-book/) から引用。

### JavaScript 版

```javascript
var promise = new Promise(function(resolve){
    resolve(42);
});
promise.then(function(value){
    console.log(value);
}).catch(function(error){
    console.error(error);
});
```

### CoffeeScript 版

```coffee
promise = new Promise (resolve) ->
    resolve 42

promise
.then (value) ->
    console.log value
.catch (error) ->
    console.error error

```

## オブジェクトを楽に書ける

コンマの抜けに悩まずに済む。
この記法は CSON (CoffeeScript-Object-Notation) と呼ぶらしい。
[bevry/cson (GitHub)](https://github.com/bevry/cson) の `cson2json`/`json2cson` で JSON との相互変換も可能。

### JavaScript 版

```javascript
var obj = {
    hoge: "hoge",
    fuga: {
        piyo: "piyo"
    },
    foo: [
        1, 2, 3,
        4, 5, 6,
        7, 8, 9
    ]
}
```

### CoffeeScript 版

```coffee
obj =
    hoge: "hoge"
    fuga:
        piyo: "piyo"
    foo: [
        1, 2, 3
        4, 5, 6
        7, 8, 9
    ]
```

## `null` / `undefined` チェックの演算子がある

`?` を置くことで `null` / `undefined` のチェックができる。
ドット演算子の前や関数呼び出し演算子の前にも置くことができる（`ReferenceError` が発生しない）。

```coffee
obj?
obj?.key
f?()
```

# 欠点

## JavaScript の上位互換ではない

JavaScript の（ほぼ）上位互換である [TypeScript]() のように JavaScript を生で直接埋め込めるわけではない（バッククオート(\`) で囲むことで埋め込むこと自体は可能）（module にして require するという手もあるが）。

キーワードや演算子の意味も JavaScript と CoffeeScript とで異なっているものがあり新たに覚える必要がある（CoffeeScript の `==` は JavaScript の `===` に相当する等）。

[ECMAScript 6]() の `for ... in`, `for ... of` と CoffeeScript の `for ... in`, `for ... of` は意味がほぼ真逆だったりする。

## コピペ耐性が低め

インデント言語の宿命。