---
categories: javascript ecmascript
...

# 公式ページ

* [ECMAScript](http://www.ecmascript.org/)

# 参考ページ

* [lukehoban/es6features](https://github.com/lukehoban/es6features)
* [Mozilla における ECMAScript 6 のサポート - JavaScript | MDN](https://developer.mozilla.org/ja/docs/Web/JavaScript/ECMAScript_6_support_in_Mozilla)
* [ECMAScript 6 compatibility table](http://kangax.github.io/compat-table/es6/)
* [ECMAScript 6の新しい構文をつかってみる#1 ｜ Developers.IO](http://dev.classmethod.jp/client-side/javascript/es6-2/)
* [ECMAScript 6の新しい構文をつかってみる#2 ｜ Developers.IO](http://dev.classmethod.jp/server-side/node-js-server-side/es6-3/)

# ES6 を試す

[Babel]() を使う。
以下、[TypeScript]() (tsc) でも使える（個人的によく使う）構文・ライブラリを挙げる。

* [ECMAScript6 - TypeScriptとECMAScript 6 - Qiita](http://qiita.com/vvakame/items/ae198ac3589f569d043b)

# 構文

## 列挙 (for ... of)

```javascript
for (var x of [2, 3, 5]) {
    console.log(x);
}
```

```text
2
3
5
```

## クラス (class)

### コンストラクタ・継承

```javascript
class Greeter
{
    constructor () {
        this.message = "hello";
    }
    greet () {
        console.log(this.message);
    }
}

class RepeatGreeter extends Greeter
{
    constructor () {
        super();
        this.repeat = 3;
    }
    greet () {
        for (var i = 0; i < this.repeat; ++i) {
            super.greet();
        }
    }
}

let greeter = new RepeatGreeter();
greeter.greet();
```

```
hello
hello
hello
```

### setter / getter

```javascript
class Greeter
{
    constructor () {
        this.message = "hello";
    }
    set message (message) {
        this._message = message + "!";
    }
    get message () {
        return this._message + "?";
    }
    greet () {
        console.log(this.message);
    }
}

let greeter = new Greeter();
greeter.greet();
```

```
hello!?
```

## 関数のアロー表記 (arrow functions)

```javascript
console.log([2, 3, 5].map(x => x * x));
[2, 3, 5].forEach((x, i) => {
    console.log(i, x);
});
```

## ブロックスコープ変数 (let)

### var 版（誤）

```javascript
var fs = [];
for (var i = 0; i < 3; ++i) {
    fs[i] = function () { return i; };
}
for (var j = 0; j < 3; ++j) {
    console.log(fs[j]());
}
```

```text
3
3
3
```

### var 版（正）

```javascript
var fs = [];
for (var i = 0; i < 3; ++i) {
    fs[i] = (function (i) {
        return function () { return i; };
    })(i);
}
for (var j = 0; j < 3; ++j) {
    console.log(fs[j]());
}
```

```text
0
1
2
```

### let (ES6) 版

```javascript
var fs = [];
for (let i = 0; i < 3; ++i) {
    fs[i] = () => { return i; };
}
for (var f of fs) {
    console.log(f());
}
```

```text
0
1
2
```

## 定数 (const)

```javascript
const answer = 42;
answer = 0;
```

```
$ babel const.js
...
SyntaxError: const.js: Line 2: "answer" is read-only
```

```
$ tsc const.ts
const.ts(2,1): error TS2450: Left-hand side of assignment expression cannot be a constant.
```

## Object の shorthand properties

```javascript
let a = 2, b = 3;
console.log({a, b});  // => { a: 2, b: 3 }
```

## 分割代入 (destructuring)

```javascript
let [x, y] = [2, 3];
console.log(x, y);  // => 2 3
```

```javascript
let {x, y} = {x: 2, y: 3};
console.log(x, y);  // => 2 3
```

```javascript
let {x: a, y: b} = {x: 2, y: 3};
console.log(a, b);  // => 2 3
```

## デフォルト引数 (default function parameters)

```javascript
let f = (x, y = 2) => x * y;
console.log(f(3));     // => 6
console.log(f(3, 3));  // => 9
```

## 可変長引数を配列で受け取る (rest parameters)

```javascript
let f = (x, ...ys) => console.log(x, ys);
f(2, 3, 5);  // => 2 [ 3, 5 ]
```

## 配列を可変長引数として渡す (spread operator)

* TypeScript (tsc 1.5.0-beta) では現状非対応の模様。

```javascript
let f = (x, y, z) => console.log(x, y, z);
f(...[2, 3, 5]);  // => 2 3 5
```

## テンプレート文字列 (template strings)

```javascript
let a = 2, b = 3;
console.log(`${a} + ${b} = ${a + b}`);  // => 2 + 3 = 5
```

## import / export

* [Babelで理解するEcmaScript6の import / export - Qiita](http://qiita.com/suisho/items/41168a50904242005271)

### CommonJS 版

```javascript
// hello.js
function hello() { console.log("Hello, world!"); }
module.exports = { hello: hello };
```

```javascript
// app.js
var hello = require("./hello");
hello.hello();
```

```
$ node app.js
Hello, world!
```

### ES6 版 (`import * as Foo from "foo"`)

```javascript
// hello.js
export function hello() { console.log("Hello, world!"); }
```

```javascript
// app.js
import * as hello from "./hello";
hello.hello();
```

```
$ babel-node app.js
Hello, world!
```

### ES6 版 (`import { Foo } from "foo"`)

```javascript
// app.js
import { hello } from "./hello";
hello();
```

### ES6 版 (`default`, `import Foo from "foo"`)

```javascript
// hello.js
export default function hello() { console.log("Hello, world!"); }
```

```javascript
// app.js
import hello from "./hello";
hello();
```

# ライブラリ

## Promise

```javascript
new Promise((resolve, reject) => {
    resolve("A");
}).then((str) => {
    console.log(`a: ${str}`);
    return new Promise((resolve, reject) => {
        resolve("B");
    }).then((str) => {
        console.log(`b: ${str}`);
        return "C";
    });
}).then((str) => {
    console.log(`c: ${str}`);
    throw new Error("D");
}).catch((err) => {
    console.log(err);
    return "E";
}).then((str) => {
    console.log(`e: ${str}`);
});
```

```
a: A
b: B
c: C
[Error: D]
e: E
```
